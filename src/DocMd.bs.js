// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Markdown = require("./Markdown.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Array = require("@rescript/core/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");

function title(txt, levelOpt) {
  var level = levelOpt !== undefined ? levelOpt : 1;
  return Markdown.heading(level)(Markdown.make(txt));
}

function renderId(stripRootOpt, txt) {
  var stripRoot = stripRootOpt !== undefined ? stripRootOpt : false;
  if (stripRoot) {
    return txt.substring(txt.indexOf(".") + 1 | 0);
  } else {
    return txt;
  }
}

function deprecationWarning(md, deprecated) {
  return Markdown.append(md, Core__Option.mapOr(deprecated, Markdown.empty(), (function (deprecated) {
                    return Markdown.forceLine(Markdown.append(Markdown.emph(Markdown.make("DEPRECATED:")), Markdown.make(" " + deprecated)));
                  })));
}

function corretDocStringHeadingLevel(levelOpt, txt) {
  var level = levelOpt !== undefined ? levelOpt : 0;
  return txt.split("\n").map(function (line) {
                var trimmedLine = line.trimStart();
                var headingLevel = Markdown.headingLevel(trimmedLine);
                var diff = (level - headingLevel | 0) + 1 | 0;
                var missingLevels = headingLevel <= 0 || diff < 0 ? 0 : diff;
                return "#".repeat(missingLevels) + trimmedLine;
              }).join("\n");
}

function moduleDocs(md, levelOpt, docs) {
  var level = levelOpt !== undefined ? levelOpt : 0;
  return Markdown.append(md, Core__Array.reduce(docs, Markdown.empty(), (function (md, txt) {
                    return Markdown.append(md, Markdown.p(Markdown.make(corretDocStringHeadingLevel(level, txt))));
                  })));
}

function renderRecordFields(fields) {
  return Core__Array.reduce(fields, Markdown.empty(), (function (md, param) {
                return Markdown.append(md, moduleDocs(deprecationWarning(Markdown.appendO(Markdown.quote(Markdown.make(param.name + ": " + param.signature)), param.optional ? Caml_option.some(Markdown.append(Markdown.make(" "), Markdown.forceLine(Markdown.emph(Markdown.make("optional"))))) : undefined), param.deprecated), 4, param.docstrings));
              }));
}

function renderItem(param, name, level, docstrings, deprecated, detail, signature, _unit) {
  return Markdown.appendO(moduleDocs(Markdown.appendO(deprecationWarning(title(name, level), deprecated), Core__Option.map(signature, (function (s) {
                            return Markdown.quote(Markdown.make(s));
                          }))), level, docstrings), Core__Option.map(detail, (function (d) {
                    if (d.kind === "record") {
                      return renderRecordFields(d.items);
                    } else {
                      var constructors = d.items;
                      return Core__Array.reduce(constructors, Markdown.empty(), (function (md, param) {
                                    return Markdown.append(md, Markdown.appendO(moduleDocs(deprecationWarning(Markdown.quote(Markdown.make(param.signature)), param.deprecated), 4, param.docstrings), Core__Option.map(param.inlineRecordFields, (function (fields) {
                                                          return renderRecordFields(fields);
                                                        }))));
                                  }));
                    }
                  })));
}

function itemDoc(item) {
  switch (item.kind) {
    case "value" :
        var id = item.id;
        return renderItem(id, "let " + renderId(undefined, id), 3, item.docstrings, item.deprecated, undefined, item.signature, undefined);
    case "type" :
        var id$1 = item.id;
        return renderItem(id$1, "type " + renderId(undefined, id$1), 3, item.docstrings, item.deprecated, item.detail, item.signature, undefined);
    case "module" :
        var id$2 = item.id;
        return itemDocs(renderItem(id$2, "module " + renderId(undefined, id$2), 2, item.docstrings, item.deprecated, undefined, undefined, undefined), item.items);
    case "moduleAlias" :
        var id$3 = item.id;
        return itemDocs(renderItem(id$3, "module " + renderId(undefined, id$3) + " \`alias\`", 2, item.docstrings, undefined, undefined, undefined, undefined), item.items);
    
  }
}

function itemDocs(md, items) {
  return Markdown.append(md, Core__Array.reduce(items, Markdown.empty(), (function (md, item) {
                    return Markdown.append(md, itemDoc(item));
                  })));
}

function render(param) {
  return itemDocs(moduleDocs(deprecationWarning(title(param.name, undefined), param.deprecated), undefined, param.docstrings), param.items);
}

exports.render = render;
/* No side effect */
