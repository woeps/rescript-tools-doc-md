// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Markdown = require("./Markdown.res.js");
var Core__Array = require("@rescript/core/src/Core__Array.res.js");
var Core__Option = require("@rescript/core/src/Core__Option.res.js");

function title(txt, templates, levelOpt) {
  var level = levelOpt !== undefined ? levelOpt : 1;
  return templates.heading(level)(txt);
}

function renderId(stripRootOpt, txt) {
  var stripRoot = stripRootOpt !== undefined ? stripRootOpt : false;
  if (stripRoot) {
    return txt.substring(txt.indexOf(".") + 1 | 0);
  } else {
    return txt;
  }
}

function deprecationWarning(md, templates, deprecated) {
  return templates.append(md, Core__Option.mapOr(deprecated, templates.empty(), (function (deprecated) {
                    return templates.line(templates.line(templates.bold("DEPRECATED: " + deprecated)));
                  })));
}

function corretDocStringHeadingLevel(levelOpt, txt) {
  var level = levelOpt !== undefined ? levelOpt : 0;
  return txt.split("\n").map(function (line) {
                var trimmedLine = line.trimStart();
                var headingLevel = Markdown.headingLevel(trimmedLine);
                var diff = (level - headingLevel | 0) + 1 | 0;
                var missingLevels = headingLevel <= 0 || diff < 0 ? 0 : diff;
                return "#".repeat(missingLevels) + trimmedLine;
              }).join("\n");
}

function moduleDocs(md, templates, levelOpt, docs) {
  var level = levelOpt !== undefined ? levelOpt : 0;
  return templates.append(md, Core__Array.reduce(docs, templates.empty(), (function (md, txt) {
                    return templates.append(md, templates.p(corretDocStringHeadingLevel(level, txt)));
                  })));
}

function renderItem(templates, param, name, level, docstrings, deprecated, param$1, signature, _unit) {
  return moduleDocs(templates.appendO(deprecationWarning(title(name, templates, level), templates, deprecated), Core__Option.map(signature, (function (s) {
                        return templates.quote(s);
                      }))), templates, level, docstrings);
}

function itemDoc(item, templates) {
  switch (item.kind) {
    case "value" :
        var id = item.id;
        return renderItem(templates, id, "let " + renderId(undefined, id), 3, item.docstrings, item.deprecated, undefined, item.signature, undefined);
    case "type" :
        var id$1 = item.id;
        return renderItem(templates, id$1, "type " + renderId(undefined, id$1), 3, item.docstrings, item.deprecated, item.detail, item.signature, undefined);
    case "module" :
        var id$2 = item.id;
        return itemDocs(renderItem(templates, id$2, "module " + renderId(undefined, id$2), 2, item.docstrings, item.deprecated, undefined, undefined, undefined), templates, item.items);
    case "moduleAlias" :
        var id$3 = item.id;
        return itemDocs(renderItem(templates, id$3, "module " + renderId(undefined, id$3) + " \`alias\`", 2, item.docstrings, undefined, undefined, undefined, undefined), templates, item.items);
    
  }
}

function itemDocs(md, templates, items) {
  return templates.append(md, Core__Array.reduce(items, templates.empty(), (function (md, item) {
                    return templates.append(md, itemDoc(item, templates));
                  })));
}

function render(param, templates) {
  return itemDocs(moduleDocs(deprecationWarning(title(param.name, templates, undefined), templates, param.deprecated), templates, undefined, param.docstrings), templates, param.items);
}

function renderMd(doc) {
  return render(doc, {
              empty: Markdown.empty,
              append: Markdown.append,
              appendO: Markdown.appendO,
              heading: Markdown.heading,
              line: Markdown.line,
              p: Markdown.p,
              bold: Markdown.bold,
              quote: Markdown.quote
            });
}

exports.render = render;
exports.renderMd = renderMd;
/* No side effect */
