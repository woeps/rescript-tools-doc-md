// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Markdown = require("./Markdown.res.js");
var Core__Array = require("@rescript/core/src/Core__Array.res.js");
var Core__Option = require("@rescript/core/src/Core__Option.res.js");

function title(txt, levelOpt) {
  var level = levelOpt !== undefined ? levelOpt : 0;
  switch (level) {
    case 0 :
        return Markdown.h1(txt);
    case 1 :
        return Markdown.h2(txt);
    case 2 :
        return Markdown.h3(txt);
    case 3 :
        return Markdown.h4(txt);
    case 4 :
        return Markdown.h5(txt);
    default:
      return Markdown.h6(txt);
  }
}

function renderId(stripRootOpt, txt) {
  var stripRoot = stripRootOpt !== undefined ? stripRootOpt : false;
  if (stripRoot) {
    return txt.substring(txt.indexOf(".") + 1 | 0);
  } else {
    return txt;
  }
}

function deprecationWarning(md, deprecated) {
  return Markdown.cmb(md, Core__Option.mapOr(deprecated, Markdown.empty(), (function (deprecated) {
                    return Markdown.line(Markdown.line(Markdown.bold("DEPRECATED: " + deprecated)));
                  })));
}

function moduleDocs(md, docs) {
  return Markdown.cmb(md, Core__Array.reduce(docs, Markdown.empty(), (function (md, txt) {
                    return Markdown.cmb(md, Markdown.p(txt));
                  })));
}

function renderItem(param, name, level, docstrings, deprecated, param$1, signature, _unit) {
  return moduleDocs(Markdown.cmbO(deprecationWarning(title(name, level), deprecated), Core__Option.map(signature, (function (s) {
                        return Markdown.quote(s);
                      }))), docstrings);
}

function itemDoc(item) {
  switch (item.kind) {
    case "value" :
        var id = item.id;
        return renderItem(id, "let " + renderId(undefined, id), 2, item.docstrings, item.deprecated, undefined, item.signature, undefined);
    case "type" :
        var id$1 = item.id;
        return renderItem(id$1, "type " + renderId(undefined, id$1), 2, item.docstrings, item.deprecated, item.detail, item.signature, undefined);
    case "module" :
        var id$2 = item.id;
        return itemDocs(renderItem(id$2, "module " + renderId(undefined, id$2), 1, item.docstrings, item.deprecated, undefined, undefined, undefined), item.items);
    case "moduleAlias" :
        var id$3 = item.id;
        return itemDocs(renderItem(id$3, "module " + renderId(undefined, id$3) + " \`alias\`", 1, item.docstrings, undefined, undefined, undefined, undefined), item.items);
    
  }
}

function itemDocs(md, items) {
  return Markdown.cmb(md, Core__Array.reduce(items, Markdown.empty(), (function (md, item) {
                    return Markdown.cmb(md, itemDoc(item));
                  })));
}

function toMd(param) {
  return itemDocs(moduleDocs(deprecationWarning(title(param.name, undefined), param.deprecated), param.docstrings), param.items);
}

exports.toMd = toMd;
/* No side effect */
