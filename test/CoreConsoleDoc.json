
{
  "name": "Core__Console",
  "docstrings": ["Functions for interacting with JavaScript console.\n\nSee: [`console`](https://developer.mozilla.org/en-US/docs/Web/API/Console)."],
  "items": [
  {
    "id": "Core__Console.assert_",
    "kind": "value",
    "name": "assert_",
    "signature": "let assert_: (. bool, 'a) => unit",
    "docstrings": ["`assert_(assertion, value)` print a message to console if `assertion` evaluates `false`. Does nothing if it's `true`.\n\nSee [`console.assert`](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\non MDN.\n\n## Examples\n\n```rescript\nConsole.assert_(false, \"Hello World!\")\nConsole.assert_(n == 42, \"The answer\")\n```"]
  }, 
  {
    "id": "Core__Console.assert2",
    "kind": "value",
    "name": "assert2",
    "signature": "let assert2: (. bool, 'a, 'b) => unit",
    "docstrings": ["`assert2(v1, v2)`. Like `assert_`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.assert2(false, \"Hello\", \"World\")\nConsole.assert2(n == 42, [1, 2, 3], '4')\n```"]
  }, 
  {
    "id": "Core__Console.assert3",
    "kind": "value",
    "name": "assert3",
    "signature": "let assert3: (. bool, 'a, 'b, 'c) => unit",
    "docstrings": ["`assert3(v1, v2, v3)`. Like `assert_`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.assert3(false, \"Hello\", \"World\", \"ReScript\")\nConsole.assert3(n == 42, \"One\", 2, #3)\n```"]
  }, 
  {
    "id": "Core__Console.assert4",
    "kind": "value",
    "name": "assert4",
    "signature": "let assert4: (. bool, 'a, 'b, 'c, 'd) => unit",
    "docstrings": ["`assert4(v1, v2, v3, v4)`. Like `assert_`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.assert4(false, \"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.assert4(m == 42, [1, 2], (3, 4), [#5, #6], #\"polyvar\")\n```"]
  }, 
  {
    "id": "Core__Console.assert5",
    "kind": "value",
    "name": "assert5",
    "signature": "let assert5: (. bool, 'a, 'b, 'c, 'd, 'e) => unit",
    "docstrings": ["`assert5(v1, v2, v3, v4, v5)`. Like `assert_`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.assert5(false, \"Hello\", \"World\", \"JS\", '!', '!')\nConsole.assert5(n == 42, [1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"})\n```"]
  }, 
  {
    "id": "Core__Console.assert6",
    "kind": "value",
    "name": "assert6",
    "signature": "let assert6: (. bool, 'a, 'b, 'c, 'd, 'e, 'f) => unit",
    "docstrings": ["`assert6(v1, v2)`. Like `assert_`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.assert6(false, \"Hello\", \"World\", \"JS\", '!', '!', '?')\nConsole.assert6(n == 42, [1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"}, 42)\n```"]
  }, 
  {
    "id": "Core__Console.assertMany",
    "kind": "value",
    "name": "assertMany",
    "signature": "let assertMany: (. bool, array<'a>) => unit",
    "docstrings": ["`assertMany(assertion, arr)`. Like `assert_`, but variadic.\n\n## Examples\n\n```rescript\nConsole.assertMany(false, [\"Hello\", \"World\"])\nConsole.assertMany(n == 42, [1, 2, 3])\n```"]
  }, 
  {
    "id": "Core__Console.clear",
    "kind": "value",
    "name": "clear",
    "signature": "let clear: (. unit) => unit",
    "docstrings": ["`clear()` clears the console, if allowed.\n\nSee [`console.clear`](https://developer.mozilla.org/en-US/docs/Web/API/console/clear)\non MDN.\n\n## Examples\n\n```rescript\nConsole.clear()\n```"]
  }, 
  {
    "id": "Core__Console.count",
    "kind": "value",
    "name": "count",
    "signature": "let count: (. string) => unit",
    "docstrings": ["`count(label)` prints to the console the number of times it's been called with the given label.\n\nSee [`console.count`](https://developer.mozilla.org/en-US/docs/Web/API/console/count)\non MDN.\n\n## Examples\n\n```rescript\nConsole.count(\"rescript\")\n```"]
  }, 
  {
    "id": "Core__Console.countReset",
    "kind": "value",
    "name": "countReset",
    "signature": "let countReset: (. string) => unit",
    "docstrings": ["`countReset(label)` resets the count for the given label to 0.\n\nSee [`console.countReset`](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)\non MDN.\n\n## Examples\n\n```rescript\nConsole.countReset(\"rescript\")\n```"]
  }, 
  {
    "id": "Core__Console.debug",
    "kind": "value",
    "name": "debug",
    "signature": "let debug: (. 'a) => unit",
    "docstrings": ["`debug(value)` print a debug message to console.\n\nSee [`console.debug`](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\non MDN.\n\n## Examples\n\n```rescript\nConsole.debug(\"Hello\")\nlet obj = {\"name\": \"ReScript\", \"version\": 10}\nConsole.debug(obj)\n```"]
  }, 
  {
    "id": "Core__Console.debug2",
    "kind": "value",
    "name": "debug2",
    "signature": "let debug2: (. 'a, 'b) => unit",
    "docstrings": ["`debug2(v1, v2)`. Like `debug`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.debug2(\"Hello\", \"World\")\nConsole.debug2([1, 2, 3], '4')\n```"]
  }, 
  {
    "id": "Core__Console.debug3",
    "kind": "value",
    "name": "debug3",
    "signature": "let debug3: (. 'a, 'b, 'c) => unit",
    "docstrings": ["`debug3(v1, v2, v3)`. Like `debug`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.debug3(\"Hello\", \"World\", \"ReScript\")\nConsole.debug3(\"One\", 2, #3)\n```"]
  }, 
  {
    "id": "Core__Console.debug4",
    "kind": "value",
    "name": "debug4",
    "signature": "let debug4: (. 'a, 'b, 'c, 'd) => unit",
    "docstrings": ["`debug4(v1, v2, v3, v4)`. Like `debug`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.debug4(\"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.debug4([1, 2], (3, 4), [#5, #6], #\"polyvar\")\n```"]
  }, 
  {
    "id": "Core__Console.debug5",
    "kind": "value",
    "name": "debug5",
    "signature": "let debug5: (. 'a, 'b, 'c, 'd, 'e) => unit",
    "docstrings": ["`debug5(v1, v2, v3, v4, v5)`. Like `debug`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.debug5(\"Hello\", \"World\", \"JS\", '!', '!')\nConsole.debug5([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"})\n```"]
  }, 
  {
    "id": "Core__Console.debug6",
    "kind": "value",
    "name": "debug6",
    "signature": "let debug6: (. 'a, 'b, 'c, 'd, 'e, 'f) => unit",
    "docstrings": ["`debug6(v1, v2, v3, v4, v5, v6)`. Like `debug`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.debug6(\"Hello\", \"World\", \"JS\", '!', '!', '?')\nConsole.debug6([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"}, 42)\n```"]
  }, 
  {
    "id": "Core__Console.debugMany",
    "kind": "value",
    "name": "debugMany",
    "signature": "let debugMany: (. array<'a>) => unit",
    "docstrings": ["`debugMany(arr)`. Like `debug`, but variadic.\n\n## Examples\n\n```rescript\nConsole.debugMany([\"Hello\", \"World\"])\nConsole.debugMany([1, 2, 3])\n```"]
  }, 
  {
    "id": "Core__Console.dir",
    "kind": "value",
    "name": "dir",
    "signature": "let dir: (. 'a) => unit",
    "docstrings": ["`dir(object)` displays an interactive view of the object in the console.\n\nSee [`console.dir`](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\non MDN.\n\n## Examples\n\n```rescript\nConsole.dir({\"language\": \"rescript\", \"version\": 10.1.2})\n```"]
  }, 
  {
    "id": "Core__Console.dirxml",
    "kind": "value",
    "name": "dirxml",
    "signature": "let dirxml: (. 'a) => unit",
    "docstrings": ["`dirxml(object)` displays an interactive tree view of an XML/HTML element in the console.\n\nSee [`console.dirxml`](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\non MDN."]
  }, 
  {
    "id": "Core__Console.error",
    "kind": "value",
    "name": "error",
    "signature": "let error: (. 'a) => unit",
    "docstrings": ["`error(value)` prints an error message to console.\n\nSee [`console.error`](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\non MDN.\n\n## Examples\n\n```rescript\nConsole.error(\"error message\")\nConsole.error((\"error\", \"invalid value\"))\n```"]
  }, 
  {
    "id": "Core__Console.error2",
    "kind": "value",
    "name": "error2",
    "signature": "let error2: (. 'a, 'b) => unit",
    "docstrings": ["`error(v1, v2)`. Like `error`, but two arguments.\n\n## Examples\n\n```rescript\nConsole.error2(\"Error\", \"here\")\nConsole.error2((\"log\", \"error\"), \"message\")\n```"]
  }, 
  {
    "id": "Core__Console.error3",
    "kind": "value",
    "name": "error3",
    "signature": "let error3: (. 'a, 'b, 'c) => unit",
    "docstrings": ["`error3(v1, v2, v3)`. Like `error`, but three arguments.\n\n## Examples\n\n```rescript\nConsole.error3(\"Hello\", \"World\", \"!!!\")\nConsole.error3(#first, #second, #third)\n```"]
  }, 
  {
    "id": "Core__Console.error4",
    "kind": "value",
    "name": "error4",
    "signature": "let error4: (. 'a, 'b, 'c, 'd) => unit",
    "docstrings": ["`error4(v1, v2, v3, v4)`. Like `error`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.error4(\"Hello\", \"World\", \"ReScript\", '!')\nConsole.error4(#first, #second, #third, (\"fourth\"))\n```"]
  }, 
  {
    "id": "Core__Console.error5",
    "kind": "value",
    "name": "error5",
    "signature": "let error5: (. 'a, 'b, 'c, 'd, 'e) => unit",
    "docstrings": ["`error5(v1, v2, v3, v4, v5)`. Like `error`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.error5('e', 'r, 'r', 'o', 'r')\nConsole.error5(1, #second, #third, (\"fourth\"), 'c')\n```"]
  }, 
  {
    "id": "Core__Console.error6",
    "kind": "value",
    "name": "error6",
    "signature": "let error6: (. 'a, 'b, 'c, 'd, 'e, 'f) => unit",
    "docstrings": ["`error6(v1, v2, v3, v4, v5, v6)`. Like `error`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.error6(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\", '!')\nConsole.error6([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"}, 42)\n```"]
  }, 
  {
    "id": "Core__Console.group",
    "kind": "value",
    "name": "group",
    "signature": "let group: (. string) => unit",
    "docstrings": ["`group(label)` creates a new \"group\" level with the given label.\n\nSee [`console.group`](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\non MDN.\n\n## Example\n\n```rescript\nConsole.group(\"first group\")\nConsole.group(\"second group\")\nConsole.log(\"a message on the second level\")\nConsole.groupEnd()\nConsole.log(\"a message message on the first level\")\nConsole.groupEnd()\n```"]
  }, 
  {
    "id": "Core__Console.groupCollapsed",
    "kind": "value",
    "name": "groupCollapsed",
    "signature": "let groupCollapsed: (. string) => unit",
    "docstrings": ["`groupCollapsed(label)`. Like `group` but collapses the group initially.\n\nSee [`console.groupCollapsed`](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\non MDN."]
  }, 
  {
    "id": "Core__Console.groupEnd",
    "kind": "value",
    "name": "groupEnd",
    "signature": "let groupEnd: (. unit) => unit",
    "docstrings": ["`groupEnd()` ends the current group.\n\nSee [`console.groupEnd`](https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd)\non MDN."]
  }, 
  {
    "id": "Core__Console.errorMany",
    "kind": "value",
    "name": "errorMany",
    "signature": "let errorMany: (. array<'a>) => unit",
    "docstrings": ["`errorMany(arr)`. Like `error`, but variadic.\n\n## Examples\n\n```rescript\nConsole.errorMany([\"Hello\", \"World\"])\nConsole.errorMany([1, 2, 3])\n```"]
  }, 
  {
    "id": "Core__Console.info",
    "kind": "value",
    "name": "info",
    "signature": "let info: (. 'a) => unit",
    "docstrings": ["`info(value)` print an informational message to console.\n\nSee [`console.info`](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\non MDN.\n\n## Examples\n\n```rescript\nConsole.info(\"Information\")\nConsole.info((\"Hello\", \"JS\"))\n```"]
  }, 
  {
    "id": "Core__Console.info2",
    "kind": "value",
    "name": "info2",
    "signature": "let info2: (. 'a, 'b) => unit",
    "docstrings": ["`info2(v1, v2)`. Like `info`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.info2(\"Info\", \"failed to download\")\nConsole.info2(#info, {\"name\": \"ReScript\"})\n```"]
  }, 
  {
    "id": "Core__Console.info3",
    "kind": "value",
    "name": "info3",
    "signature": "let info3: (. 'a, 'b, 'c) => unit",
    "docstrings": ["`info3(v1, v2, v3)`. Like `info`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.info3(\"Hello\", \"World\", \"ReScript\")\nConsole.info3([1, 2, 3], #4, #5)\n```"]
  }, 
  {
    "id": "Core__Console.info4",
    "kind": "value",
    "name": "info4",
    "signature": "let info4: (. 'a, 'b, 'c, 'd) => unit",
    "docstrings": ["`info4(v1, v2, v3, v4)`. Like `info`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.info4(\"Hello\", \"World\", \"ReScript\", '!')\nConsole.info4([1, 2, 3], #4, #5, #lastinfo)\n```"]
  }, 
  {
    "id": "Core__Console.info5",
    "kind": "value",
    "name": "info5",
    "signature": "let info5: (. 'a, 'b, 'c, 'd, 'e) => unit",
    "docstrings": ["`info5(v1, v2, v3, v4, v5)`. Like `info`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.info5(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\")\nConsole.info5([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"})\n```"]
  }, 
  {
    "id": "Core__Console.info6",
    "kind": "value",
    "name": "info6",
    "signature": "let info6: (. 'a, 'b, 'c, 'd, 'e, 'f) => unit",
    "docstrings": ["`info6(v1, v2, v3, v4, v5, v6)`. Like `info`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.info6(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\", '!')\nConsole.info6([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"}, 42)\n```"]
  }, 
  {
    "id": "Core__Console.infoMany",
    "kind": "value",
    "name": "infoMany",
    "signature": "let infoMany: (. array<'a>) => unit",
    "docstrings": ["`infoMany(arr)`. Like `info`, but variadic.\n\n## Examples\n\n```rescript\nConsole.infoMany([\"Hello\", \"World\"])\nConsole.infoMany([1, 2, 3])\n```"]
  }, 
  {
    "id": "Core__Console.log",
    "kind": "value",
    "name": "log",
    "signature": "let log: (. 'a) => unit",
    "docstrings": ["`log(value)` print a message to console.\n\nSee [`console.log`](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\non MDN.\n\n## Examples\n\n```rescript\nConsole.log(\"Hello\")\nlet obj = {\"name\": \"ReScript\", \"version\": 10}\nConsole.log(obj)\n```"]
  }, 
  {
    "id": "Core__Console.log2",
    "kind": "value",
    "name": "log2",
    "signature": "let log2: (. 'a, 'b) => unit",
    "docstrings": ["`log2(v1, v2)`. Like `log`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.log2(\"Hello\", \"World\")\nConsole.log2([1, 2, 3], '4')\n```"]
  }, 
  {
    "id": "Core__Console.log3",
    "kind": "value",
    "name": "log3",
    "signature": "let log3: (. 'a, 'b, 'c) => unit",
    "docstrings": ["`log3(v1, v2, v3)`. Like `log`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.log3(\"Hello\", \"World\", \"ReScript\")\nConsole.log3(\"One\", 2, #3)\n```"]
  }, 
  {
    "id": "Core__Console.log4",
    "kind": "value",
    "name": "log4",
    "signature": "let log4: (. 'a, 'b, 'c, 'd) => unit",
    "docstrings": ["`log4(v1, v2, v3, v4)`. Like `log`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.log4(\"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.log4([1, 2], (3, 4), [#5, #6], #\"polyvar\")\n```"]
  }, 
  {
    "id": "Core__Console.log5",
    "kind": "value",
    "name": "log5",
    "signature": "let log5: (. 'a, 'b, 'c, 'd, 'e) => unit",
    "docstrings": ["`log5(v1, v2, v3, v4, v5)`. Like `log`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.log5(\"Hello\", \"World\", \"JS\", '!', '!')\nConsole.log5([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"})\n```"]
  }, 
  {
    "id": "Core__Console.log6",
    "kind": "value",
    "name": "log6",
    "signature": "let log6: (. 'a, 'b, 'c, 'd, 'e, 'f) => unit",
    "docstrings": ["`log6(v1, v2, v3, v4, v5, v6)`. Like `log`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.log6(\"Hello\", \"World\", \"JS\", '!', '!', '?')\nConsole.log6([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"}, 42)\n```"]
  }, 
  {
    "id": "Core__Console.logMany",
    "kind": "value",
    "name": "logMany",
    "signature": "let logMany: (. array<'a>) => unit",
    "docstrings": ["`logMany(arr)`. Like `log`, but variadic.\n\n## Examples\n\n```rescript\nConsole.logMany([\"Hello\", \"World\"])\nConsole.logMany([1, 2, 3])\n```"]
  }, 
  {
    "id": "Core__Console.table",
    "kind": "value",
    "name": "table",
    "signature": "let table: (. 'a) => unit",
    "docstrings": ["`table(object)` displays an tabular view of the object in the console.\n\nSee [`console.table`](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\non MDN.\n\n## Examples\n\n```rescript\nConsole.table({\"language\": \"rescript\", \"version\": 10.1.2})\n```"]
  }, 
  {
    "id": "Core__Console.time",
    "kind": "value",
    "name": "time",
    "signature": "let time: (. string) => unit",
    "docstrings": ["`time(label)` creates a timer to measure how long an operation takes. `label`\nmust be a unique name. Call `console.timeEnd` with the same `label` to print\noutput time.\n\nSee [`console.time`](https://developer.mozilla.org/en-US/docs/Web/API/console/time)\non MDN.\n\n## Examples\n\n```rescript\nConsole.time(\"for_time\")\nfor x in 3 downto 1 {\n  Console.log(x)\n  Console.timeLog(\"for_time\")\n}\nConsole.timeEnd(\"for_time\")\n```"]
  }, 
  {
    "id": "Core__Console.timeEnd",
    "kind": "value",
    "name": "timeEnd",
    "signature": "let timeEnd: (. string) => unit",
    "docstrings": ["`timeEnd(label)` stops a timer created by `time`.\n\nSee [`console.timeEnd`](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)\non MDN.\n\n## Examples\n\n```rescript\nConsole.time(\"for_time\")\nfor x in 3 downto 1 {\n  Console.log(x)\n  Console.timeLog(\"for_time\")\n}\nConsole.timeEnd(\"for_time\")\n```"]
  }, 
  {
    "id": "Core__Console.timeLog",
    "kind": "value",
    "name": "timeLog",
    "signature": "let timeLog: (. string) => unit",
    "docstrings": ["`timeLog(label)` prints the current elapsed time of the given timer to the console.\n\nSee [`console.timeLog`](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\non MDN.\n\n## Examples\n\n```rescript\nConsole.time(\"for_time\")\nfor x in 3 downto 1 {\n  Console.log(x)\n  Console.timeLog(\"for_time\")\n}\nConsole.timeEnd(\"for_time\")\n```"]
  }, 
  {
    "id": "Core__Console.trace",
    "kind": "value",
    "name": "trace",
    "signature": "let trace: (. unit) => unit",
    "docstrings": ["`trace()` print a stack trace to console.\n\nSee [`console.trace`](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\non MDN.\n\n## Examples\n\n```rescript\nlet main = () => {\n  Console.trace()\n}\nmain()\n// In the console, the following trace will be displayed:\n// main\n// <anonymous>\n```"]
  }, 
  {
    "id": "Core__Console.warn",
    "kind": "value",
    "name": "warn",
    "signature": "let warn: (. 'a) => unit",
    "docstrings": ["`warn(value)` print a warning message to console.\n\nSee [`console.warn`](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\non MDN.\n\n## Examples\n\n```rescript\nConsole.warn(\"Warning\")\nConsole.warn((\"Warning\", \"invalid number\"))\n```"]
  }, 
  {
    "id": "Core__Console.warn2",
    "kind": "value",
    "name": "warn2",
    "signature": "let warn2: (. 'a, 'b) => unit",
    "docstrings": ["`warn2(v1, v2)`. Like `warn`, but two arguments.\n\n## Examples\n\n```rescript\nConsole.warn2(\"Hello\", \"World\")\nConsole.warn2([1, 2, 3], 4)\n```"]
  }, 
  {
    "id": "Core__Console.warn3",
    "kind": "value",
    "name": "warn3",
    "signature": "let warn3: (. 'a, 'b, 'c) => unit",
    "docstrings": ["`warn3(v1, v2, v3)`. Like `warn`, but three arguments.\n\n## Examples\n\n```rescript\nConsole.warn3(\"Hello\", \"World\", \"ReScript\")\nConsole.warn3([1, 2, 3], #4, #5)\n```"]
  }, 
  {
    "id": "Core__Console.warn4",
    "kind": "value",
    "name": "warn4",
    "signature": "let warn4: (. 'a, 'b, 'c, 'd) => unit",
    "docstrings": ["`warn4(v1, v2, v3, v4)`. Like `warn`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.warn4(\"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.warn4(#first, #second, #third, (\"fourth\"))\n```"]
  }, 
  {
    "id": "Core__Console.warn5",
    "kind": "value",
    "name": "warn5",
    "signature": "let warn5: (. 'a, 'b, 'c, 'd, 'e) => unit",
    "docstrings": ["`warn5(v1, v2, v3, v4, v5)`. Like `warn`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.warn5(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\")\nConsole.warn5([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"})\n```"]
  }, 
  {
    "id": "Core__Console.warn6",
    "kind": "value",
    "name": "warn6",
    "signature": "let warn6: (. 'a, 'b, 'c, 'd, 'e, 'f) => unit",
    "docstrings": ["`warn6(v1, v2, v3, v4, v5, v6)`. Like `warn`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.warn6(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\", '!')\nConsole.warn6([1, 2], (3, 4), [#5, #6], #\"polyvar\", {\"name\": \"ReScript\"}, 42)\n```"]
  }, 
  {
    "id": "Core__Console.warnMany",
    "kind": "value",
    "name": "warnMany",
    "signature": "let warnMany: (. array<'a>) => unit",
    "docstrings": ["`warnMany(arr)`. Like `warn`, but variadic.\n\n## Examples\n\n```rescript\nConsole.warnMany([\"Hello\", \"World\"])\nConsole.warnMany([1, 2, 3])\n```"]
  }]
}
